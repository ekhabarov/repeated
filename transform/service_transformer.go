// Code generated by protoc-gen-struct-transformer, version: 1.0.6. DO NOT EDIT.
// source file: service.proto
// source package: mypackage

package transform

import (
	"github.com/ekhabarov/repeated"
	"github.com/ekhabarov/repeated/pb"
)

func PbToInnerPtr(src *pb.Inner, opts ...TransformParam) *repeated.Inner {
	if src == nil {
		return nil
	}

	d := PbToInner(*src, opts...)
	return &d
}

func PbToInnerPtrList(src []*pb.Inner, opts ...TransformParam) []*repeated.Inner {
	resp := make([]*repeated.Inner, len(src))

	for i, s := range src {
		resp[i] = PbToInnerPtr(s, opts...)
	}

	return resp
}

func PbToInnerPtrVal(src *pb.Inner, opts ...TransformParam) repeated.Inner {
	if src == nil {
		return repeated.Inner{}
	}

	return PbToInner(*src, opts...)
}

func PbToInnerPtrValList(src []*pb.Inner, opts ...TransformParam) []repeated.Inner {
	resp := make([]repeated.Inner, len(src))

	for i, s := range src {
		resp[i] = PbToInner(*s)
	}

	return resp
}

// PbToInnerList is DEPRECATED. Use PbToInnerPtrValList instead.
func PbToInnerList(src []*pb.Inner, opts ...TransformParam) []repeated.Inner {
	return PbToInnerPtrValList(src)
}

func PbToInner(src pb.Inner, opts ...TransformParam) repeated.Inner {
	s := repeated.Inner{
		Text: src.Text,
	}

	applyOptions(opts...)

	return s
}

func PbToInnerValPtr(src pb.Inner, opts ...TransformParam) *repeated.Inner {
	d := PbToInner(src, opts...)
	return &d
}

func PbToInnerValList(src []pb.Inner, opts ...TransformParam) []repeated.Inner {
	resp := make([]repeated.Inner, len(src))

	for i, s := range src {
		resp[i] = PbToInner(s, opts...)
	}

	return resp
}

func InnerToPbPtr(src *repeated.Inner, opts ...TransformParam) *pb.Inner {
	if src == nil {
		return nil
	}

	d := InnerToPb(*src, opts...)
	return &d
}

func InnerToPbPtrList(src []*repeated.Inner, opts ...TransformParam) []*pb.Inner {
	resp := make([]*pb.Inner, len(src))

	for i, s := range src {
		resp[i] = InnerToPbPtr(s, opts...)
	}

	return resp
}

func InnerToPbPtrVal(src *repeated.Inner, opts ...TransformParam) pb.Inner {
	if src == nil {
		return pb.Inner{}
	}

	return InnerToPb(*src, opts...)
}

func InnerToPbValPtrList(src []repeated.Inner, opts ...TransformParam) []*pb.Inner {
	resp := make([]*pb.Inner, len(src))

	for i, s := range src {
		g := InnerToPb(s, opts...)
		resp[i] = &g
	}

	return resp
}

// InnerToPbList is DEPRECATED. Use InnerToPbValPtrList instead.
func InnerToPbList(src []repeated.Inner, opts ...TransformParam) []*pb.Inner {
	return InnerToPbValPtrList(src)
}

func InnerToPb(src repeated.Inner, opts ...TransformParam) pb.Inner {
	s := pb.Inner{
		Text: src.Text,
	}

	applyOptions(opts...)

	return s
}

func InnerToPbValPtr(src repeated.Inner, opts ...TransformParam) *pb.Inner {
	d := InnerToPb(src, opts...)
	return &d
}

func InnerToPbValList(src []repeated.Inner, opts ...TransformParam) []pb.Inner {
	resp := make([]pb.Inner, len(src))

	for i, s := range src {
		resp[i] = InnerToPb(s, opts...)
	}

	return resp
}

func PbToOuterPtr(src *pb.Outer, opts ...TransformParam) *repeated.Outer {
	if src == nil {
		return nil
	}

	d := PbToOuter(*src, opts...)
	return &d
}

func PbToOuterPtrList(src []*pb.Outer, opts ...TransformParam) []*repeated.Outer {
	resp := make([]*repeated.Outer, len(src))

	for i, s := range src {
		resp[i] = PbToOuterPtr(s, opts...)
	}

	return resp
}

func PbToOuterPtrVal(src *pb.Outer, opts ...TransformParam) repeated.Outer {
	if src == nil {
		return repeated.Outer{}
	}

	return PbToOuter(*src, opts...)
}

func PbToOuterPtrValList(src []*pb.Outer, opts ...TransformParam) []repeated.Outer {
	resp := make([]repeated.Outer, len(src))

	for i, s := range src {
		resp[i] = PbToOuter(*s)
	}

	return resp
}

// PbToOuterList is DEPRECATED. Use PbToOuterPtrValList instead.
func PbToOuterList(src []*pb.Outer, opts ...TransformParam) []repeated.Outer {
	return PbToOuterPtrValList(src)
}

func PbToOuter(src pb.Outer, opts ...TransformParam) repeated.Outer {
	s := repeated.Outer{
		ID:     int(src.Id),
		Inners: PbToInner(src.Inners, opts...),
	}

	applyOptions(opts...)

	return s
}

func PbToOuterValPtr(src pb.Outer, opts ...TransformParam) *repeated.Outer {
	d := PbToOuter(src, opts...)
	return &d
}

func PbToOuterValList(src []pb.Outer, opts ...TransformParam) []repeated.Outer {
	resp := make([]repeated.Outer, len(src))

	for i, s := range src {
		resp[i] = PbToOuter(s, opts...)
	}

	return resp
}

func OuterToPbPtr(src *repeated.Outer, opts ...TransformParam) *pb.Outer {
	if src == nil {
		return nil
	}

	d := OuterToPb(*src, opts...)
	return &d
}

func OuterToPbPtrList(src []*repeated.Outer, opts ...TransformParam) []*pb.Outer {
	resp := make([]*pb.Outer, len(src))

	for i, s := range src {
		resp[i] = OuterToPbPtr(s, opts...)
	}

	return resp
}

func OuterToPbPtrVal(src *repeated.Outer, opts ...TransformParam) pb.Outer {
	if src == nil {
		return pb.Outer{}
	}

	return OuterToPb(*src, opts...)
}

func OuterToPbValPtrList(src []repeated.Outer, opts ...TransformParam) []*pb.Outer {
	resp := make([]*pb.Outer, len(src))

	for i, s := range src {
		g := OuterToPb(s, opts...)
		resp[i] = &g
	}

	return resp
}

// OuterToPbList is DEPRECATED. Use OuterToPbValPtrList instead.
func OuterToPbList(src []repeated.Outer, opts ...TransformParam) []*pb.Outer {
	return OuterToPbValPtrList(src)
}

func OuterToPb(src repeated.Outer, opts ...TransformParam) pb.Outer {
	s := pb.Outer{
		Id:     int64(src.ID),
		Inners: InnerToPb(src.Inners, opts...),
	}

	applyOptions(opts...)

	return s
}

func OuterToPbValPtr(src repeated.Outer, opts ...TransformParam) *pb.Outer {
	d := OuterToPb(src, opts...)
	return &d
}

func OuterToPbValList(src []repeated.Outer, opts ...TransformParam) []pb.Outer {
	resp := make([]pb.Outer, len(src))

	for i, s := range src {
		resp[i] = OuterToPb(s, opts...)
	}

	return resp
}
